#include "stdafx.h"
#include "FnTable.h"

/**
 * Resulting object file for autogenerated proxys.
 *
 * Since SteamVR allows programs to use a C-like API (see openvr_capi.h), where
 * you prepend 'FnTable:' to an interface and get a table of functions back, we need to proxy to them.
 *
 * Unfortunately there isn't an object to be passed in as 'this' or anything easy like that where we could
 * just return the vtables, so after a lot of testing complicated macro systems I determined that
 * automatically-generated 'thunk'-tions (ha ha) proxying onto the real object would be the best course of action.
 *
 * The autogeneration script is written in Python, and is called 'generate.py' and is kept in the same directory as
 * this header.
 *
 * Of critical importance is that you use the INTERFACE_FUNC macro in your interface (CVRWhatever_099.h) definitions, as
 * this is what the script is looking for.
 *
 * Failure to comply with this, or not running the script after you've made changes, should not show any issue in C++ programs,
 * but anything using the plain C API (*cough* C#/Unity *cough*) won't be able to use your interface, or worse, mysterious crash
 * bugs inside automatically-generated JIT functions later on.
 *
 * For this reason, searching for 'virtual' in the interface header files to ensure you haven't missed any is highly recommended.
 *
 * Also note that if there is an error in the scripts, the autogenerated header files will be corrupted and your IDE will start
 * showering you with errors. Ignore these and fix the issues presented by the generation script, and with the proper files generated
 * it should build fine. Note that Visual Studio sometimes needs a restart after doing this to reset some stuck Intellisense
 * errors (however, building the project shouldn't be affected).
 *
 * Finally, if you've split a INTERFACE_FUNC block across multiple lines, include a backslash ('\') as the very last character on
 * each line to combine it into a single line. C++ doesn't require this, but the generation tool certainly does.
 */

// Use stdcall on Windows, see openvr_capi.h
// Note that VC++ (and most other compilers) ignore calltype definitions on 64-bit, using fastcall instead. Not that it's
// relevant for 99% of this, but if you're getting mysterious bugs in 64-bit software don't think it's caused by this.
#if defined( _WIN32 )
#define OPENVR_FNTABLE_CALLTYPE __stdcall
#else
#define OPENVR_FNTABLE_CALLTYPE
#endif

// Implementation of the getter methods
#include "decls_h.gen.h"

// Implementation of the static methods
#include "defs_h.gen.h"
